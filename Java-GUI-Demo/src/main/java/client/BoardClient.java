/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client;

import remote.IRemoteBoard;
import remote.IRemoteClient;

import javax.swing.*;
import java.awt.*;
import java.rmi.RemoteException;
import java.util.ArrayList;

/**
 *
 * @author ycw
 */
public class BoardClient extends javax.swing.JFrame {

    private String mode;
    private Point start;
    private Point end;
    private Point remoteStart;
    private Point remoteEnd;
    private String remoteMode;
    private IRemoteBoard remoteBoard;
    public final String DRAWLINE = "drawLine";
    public final String FREEDRAW = "freeDraw";
    public final String DRAWREC = "drawRec";
    public final String DRAWCIRCLE = "drawCircle";
    public final String DRAWTRI = "drawTri";
    private String name;
    private Color color;
    private Color remoteColor;
    private ArrayList<String> clientNames;
    DefaultListModel chatModel;
    Graphics g;

    /**
     * Creates new form BoardClient
     */
    public BoardClient(IRemoteBoard remoteBoard, String name) {
        this.remoteBoard = remoteBoard;
        mode = "freeDraw";
        remoteStart = new Point(0, 0);
        remoteEnd = new Point(0, 0);
        start = new Point(0, 0);
        end = new Point(0, 0);
        this.name = name;
        userList = new JList<>();
        color = new Color(51, 213, 51);
        remoteColor = new Color(0x000000);
        chatModel = new DefaultListModel();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        boardPanel = new javax.swing.JPanel();
        drawLabel = new javax.swing.JLabel();
        inputPanel = new javax.swing.JScrollPane();
        inputArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        listPanel = new javax.swing.JPanel();
        userListLabel = new javax.swing.JLabel();
        userListPanel = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        chatPanel = new javax.swing.JPanel();
        chatLabel = new javax.swing.JLabel();
        chatBoxPanel = new javax.swing.JScrollPane();
        chatList = new javax.swing.JList<>();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newBoard = new javax.swing.JMenuItem();
        fileSave = new javax.swing.JMenuItem();
        fileSaveAs = new javax.swing.JMenuItem();
        fileClose = new javax.swing.JMenuItem();
        shapeMenu = new javax.swing.JMenu();
        drawLine = new javax.swing.JRadioButtonMenuItem();
        drawRect = new javax.swing.JRadioButtonMenuItem();
        drawTri = new javax.swing.JRadioButtonMenuItem();
        drawCir = new javax.swing.JRadioButtonMenuItem();
        colorMenu = new javax.swing.JMenu();
        colorChooser = new javax.swing.JMenuItem();
        textMenu = new javax.swing.JMenu();
        drawText = new javax.swing.JMenuItem();
        drawingMenu = new javax.swing.JMenu();
        cursorMenu = new javax.swing.JMenu();
        currentTool = new javax.swing.JMenu();
        currentColor = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        boardPanel.setBackground(new java.awt.Color(255, 255, 255));
        boardPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                try {
                    boardPanelMouseDragged(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        boardPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                boardPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                try {
                    boardPanelMouseReleased(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        drawLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        drawLabel.setText("Drawing Section");

        javax.swing.GroupLayout boardPanelLayout = new javax.swing.GroupLayout(boardPanel);
        boardPanel.setLayout(boardPanelLayout);
        boardPanelLayout.setHorizontalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boardPanelLayout.createSequentialGroup()
                .addComponent(drawLabel)
                .addGap(0, 339, Short.MAX_VALUE))
        );
        boardPanelLayout.setVerticalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boardPanelLayout.createSequentialGroup()
                .addComponent(drawLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        inputPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        inputPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        inputArea.setColumns(20);
        inputArea.setLineWrap(true);
        inputArea.setRows(5);
        inputArea.setText("sdfa ijdj ajid ijs ifjaijfij jid fjai fij djalf jad jkfjaijdij kfjijf ad kfiakdj ifka jid akfj ij idkasj da d\n\n\n\nd\nas\nf\ns\nd\na\nf\n");
        inputPanel.setViewportView(inputArea);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    sendButtonActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        userListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userListLabel.setText("Participants");
        userListLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        userList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        userList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userListMouseClicked(evt);
            }
        });
        userListPanel.setViewportView(userList);

        javax.swing.GroupLayout listPanelLayout = new javax.swing.GroupLayout(listPanel);
        listPanel.setLayout(listPanelLayout);
        listPanelLayout.setHorizontalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userListPanel)
            .addGroup(listPanelLayout.createSequentialGroup()
                .addComponent(userListLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        listPanelLayout.setVerticalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listPanelLayout.createSequentialGroup()
                .addComponent(userListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addContainerGap())
        );

        chatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chatLabel.setText("Chat");
        chatLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        chatList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        chatBoxPanel.setViewportView(chatList);

        javax.swing.GroupLayout chatPanelLayout = new javax.swing.GroupLayout(chatPanel);
        chatPanel.setLayout(chatPanelLayout);
        chatPanelLayout.setHorizontalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chatBoxPanel)
            .addGroup(chatPanelLayout.createSequentialGroup()
                .addComponent(chatLabel)
                .addGap(0, 147, Short.MAX_VALUE))
        );
        chatPanelLayout.setVerticalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatPanelLayout.createSequentialGroup()
                .addComponent(chatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatBoxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuBar.setMaximumSize(new java.awt.Dimension(200, 30));
        menuBar.setMinimumSize(new java.awt.Dimension(20, 20));
        menuBar.setPreferredSize(new java.awt.Dimension(300, 27));

        fileMenu.setText("File");

        newBoard.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newBoard.setText("New Board");
        newBoard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBoardActionPerformed(evt);
            }
        });
        fileMenu.add(newBoard);

        fileSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        fileSave.setText("Save");
        fileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveActionPerformed(evt);
            }
        });
        fileMenu.add(fileSave);

        fileSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        fileSaveAs.setText("Save As");
        fileSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveAsActionPerformed(evt);
            }
        });
        fileMenu.add(fileSaveAs);

        fileClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        fileClose.setText("Close Board");
        fileClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileCloseActionPerformed(evt);
            }
        });
        fileMenu.add(fileClose);

        menuBar.add(fileMenu);

        shapeMenu.setText("Shape");
        shapeMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shapeMenuMouseClicked(evt);
            }
        });

        drawLine.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        buttonGroup1.add(drawLine);
        drawLine.setText("Line");
        drawLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawLineActionPerformed(evt);
            }
        });
        shapeMenu.add(drawLine);

        drawRect.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        buttonGroup1.add(drawRect);
        drawRect.setText("Rectangle");
        drawRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawRectActionPerformed(evt);
            }
        });
        shapeMenu.add(drawRect);

        drawTri.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        buttonGroup1.add(drawTri);
        drawTri.setText("Triangle");
        drawTri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawTriActionPerformed(evt);
            }
        });
        shapeMenu.add(drawTri);

        drawCir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        buttonGroup1.add(drawCir);
        drawCir.setText("Circle");
        drawCir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawCirActionPerformed(evt);
            }
        });
        shapeMenu.add(drawCir);

        menuBar.add(shapeMenu);

        colorMenu.setText("Color");

        colorChooser.setText("Choose");
        colorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserActionPerformed(evt);
            }
        });
        colorMenu.add(colorChooser);

        menuBar.add(colorMenu);

        textMenu.setText("Text");
        textMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textMenuActionPerformed(evt);
            }
        });

        drawText.setText("drawText");
        drawText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawTextActionPerformed(evt);
            }
        });
        textMenu.add(drawText);

        menuBar.add(textMenu);
        menuBar.add(drawingMenu);
        menuBar.add(cursorMenu);

        currentTool.setBackground(java.awt.Color.lightGray);
        currentTool.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        currentTool.setOpaque(true);
        menuBar.add(currentTool);

        currentColor.setBackground(java.awt.Color.lightGray);
        currentColor.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        currentColor.setText("current color");
        currentColor.setOpaque(true);
        menuBar.add(currentColor);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(sendButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearButton)
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(listPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(listPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(inputPanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(clearButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveActionPerformed
        // TODO add your handling code here:
    
    }//GEN-LAST:event_fileSaveActionPerformed

    private void fileSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveAsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileSaveAsActionPerformed

    private void fileCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileCloseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileCloseActionPerformed

    private void newBoardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBoardActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_newBoardActionPerformed

    private void shapeMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shapeMenuMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_shapeMenuMouseClicked

    private void drawLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawLineActionPerformed
        // TODO add your handling code here:
        mode = DRAWLINE;
        start.setLocation(0, 0);
        end.setLocation(0, 0);
        System.out.println("mode is "+mode);
        System.out.println(start+"end is "+end);
    }//GEN-LAST:event_drawLineActionPerformed

    private void drawCirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawCirActionPerformed
        // TODO add your handling code here:
        mode = DRAWCIRCLE;
        System.out.println("mode is "+mode);
    }//GEN-LAST:event_drawCirActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clearButtonActionPerformed

    private void boardPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPanelMousePressed
        // TODO add your handling code here:
        start.setLocation(evt.getX(), evt.getY());
        //end.setLocation(0, 0);
        System.out.println("location0"+start+"  "+end+"evt"+evt.getX()+" "+evt.getY());
    }//GEN-LAST:event_boardPanelMousePressed

    private void boardPanelMouseReleased(java.awt.event.MouseEvent evt) throws RemoteException {//GEN-FIRST:event_boardPanelMouseReleased
        // TODO add your handling code here:
        g = boardPanel.getGraphics();
        paint(g);
        remoteBoard.draw(name, mode, start, end, color);
        start.setLocation(0, 0);
        end.setLocation(0, 0);


    }//GEN-LAST:event_boardPanelMouseReleased

    private void boardPanelMouseDragged(java.awt.event.MouseEvent evt) throws RemoteException {//GEN-FIRST:event_boardPanelMouseDragged
        // TODO add your handling code here:
        g = boardPanel.getGraphics();
        if(mode.equals(FREEDRAW)){
            end.setLocation(evt.getX(), evt.getY());
            paint(g);
            remoteBoard.draw(name, mode, start, end, color);
            start = end;
        }else if(mode.equals(DRAWLINE)|| mode.equals(DRAWREC) || mode.equals(DRAWTRI) || mode.equals(DRAWCIRCLE)){
            if(end.x != 0 &&  end.y != 0){
                g.setXORMode(boardPanel.getBackground());
                paint(g);
            }
            end.setLocation(evt.getX(), evt.getY());
            paint(g);
        }

    }//GEN-LAST:event_boardPanelMouseDragged

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
        remoteBoard.addMessage(name, inputArea.getText());

    }//GEN-LAST:event_sendButtonActionPerformed

    private void drawRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawRectActionPerformed
        // TODO add your handling code here:
        mode = DRAWREC;
    }//GEN-LAST:event_drawRectActionPerformed

    private void drawTriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawTriActionPerformed
        // TODO add your handling code here:
        mode = DRAWTRI;
    }//GEN-LAST:event_drawTriActionPerformed

    private void textMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textMenuActionPerformed

    private void userListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userListMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_userListMouseClicked

    private void colorChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooserActionPerformed
        // TODO add your handling code here:
        JColorChooser colorChooser = new JColorChooser();
        color = JColorChooser.showDialog(null, "please choose a color", Color.black);
    }//GEN-LAST:event_colorChooserActionPerformed

    private void drawTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawTextActionPerformed
        // TODO add your handling code here:
        mode = "drawText";
    }//GEN-LAST:event_drawTextActionPerformed

    /**
     * paint the whiteboard
     * @param g graphics
     */
    @Override
    public void paint(Graphics g) {
        System.out.println("enter");
        g.setColor(color);
        if(mode.equals(FREEDRAW)){
            g.drawLine(start.x, start.y, end.x, end.y);
            System.out.println("draw successful");
        }else if(mode.equals(DRAWLINE)){
            g.drawLine(start.x, start.y, end.x, end.y);
            System.out.println("draw line successful");
        }else if(mode.equals(DRAWREC)){
            g.drawRect(startPoint().x, startPoint().y, Math.abs(start.x - end.x), Math.abs(start.y - end.y));
            System.out.println("draw rectangle successful");
        }else if(mode.equals(DRAWCIRCLE)){
            g.drawOval(startPoint().x, startPoint().y, Math.abs(start.x - end.x), Math.abs(start.y - end.y));
            System.out.println("draw circle successful");
        }else if(mode.equals(DRAWTRI)){
            int[] xPoints = {start.x, end.x, Math.min(start.x, end.x) - Math.abs(start.x - end.x)};
            int[] yPoints = {start.y, end.y, end.y};
            g.drawPolygon(xPoints, yPoints, 3);
            System.out.println("draw triangle successful");
        }
    }

    /**
     * method for remote server call to draw different shapes
     * @param g whiteboard graphics
     * @param mode draw shape
     * @param start start point
     * @param end end point
     */
    public void remoteDraw(Graphics g, String mode, Point start, Point end, Color color){
        this.remoteColor = color;
        remoteMode = mode;
        remoteStart.setLocation(start);
        remoteEnd.setLocation(end);
        g.setColor(remoteColor);
        System.out.println("enter remote");
        if(remoteMode.equals(FREEDRAW)){
            g.drawLine(remoteStart.x, remoteStart.y, remoteEnd.x, remoteEnd.y);
            System.out.println("draw successful");
        }else if(remoteMode.equals(DRAWLINE)){
            g.drawLine(remoteStart.x, remoteStart.y, remoteEnd.x, remoteEnd.y);
            System.out.println("draw line successful");
        }else if(remoteMode.equals(DRAWREC)){
            g.drawRect(remoteStartPoint().x, remoteStartPoint().y, Math.abs(remoteStart.x - remoteEnd.x), Math.abs(remoteStart.y - remoteEnd.y));
            System.out.println("draw rectangle successful");
        }else if(remoteMode.equals(DRAWCIRCLE)){
            g.drawOval(remoteStartPoint().x, remoteStartPoint().y, Math.abs(remoteStart.x - remoteEnd.x), Math.abs(remoteStart.y - remoteEnd.y));
            System.out.println("draw circle successful");
        }else if(remoteMode.equals(DRAWTRI)){
            int[] xPoints = {remoteStart.x, remoteEnd.x, Math.min(remoteStart.x, remoteEnd.x) - Math.abs(remoteStart.x - remoteEnd.x)};
            int[] yPoints = {remoteStart.y, remoteEnd.y, remoteEnd.y};
            g.drawPolygon(xPoints, yPoints, 3);
            System.out.println("draw triangle successful");
        }
    }

    public void setStart(int x, int y){
        start.setLocation(x, y);
    }

    public void setEnd(int x, int y){
        end.setLocation(x, y);
    }

    public void setMode(String mode){
        this.mode = mode;
    }

    public JPanel getBoardPanel() {
        return boardPanel;
    }

    /**
     * top left point, used for drawing different shapes
     * @return top left point
     */
    public Point startPoint(){
        Point startPoint = new Point();
        startPoint.x = Math.min(start.x, end.x);
        startPoint.y = Math.min(start.y, end.y);
        return startPoint;
    }

    /**
     * remote top left point, used for drawing different shapes
     * @return top left point
     */
    public Point remoteStartPoint(){
        Point startPoint = new Point();
        startPoint.x = Math.min(remoteStart.x, remoteEnd.x);
        startPoint.y = Math.min(remoteStart.y, remoteEnd.y);
        return startPoint;
    }

    /**
     * update clients list in the room currently
     * @param clients list of client names
     */
    public void updateList(ArrayList<String> clients){
        DefaultListModel userModel = new DefaultListModel();
        for(String name:clients){
            userModel.addElement(name);
        }
        userList.setModel(userModel);
    }

    /**
     * update chat when connect to the server
     * @param text a list of messages
     */
    public void updateChat(ArrayList<String> text){
        if(!(text == null)){
            for(String name:text){
                chatModel.addElement(name);
            }
        }
        chatList.setModel(chatModel);
    }

    /**
     * add one message to the list
     * @param text message
     */
    public void addMessage(String text){
        chatModel.addElement(text);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane chatBoxPanel;
    private javax.swing.JLabel chatLabel;
    private javax.swing.JList<String> chatList;
    private javax.swing.JPanel chatPanel;
    private javax.swing.JButton clearButton;
    private javax.swing.JMenuItem colorChooser;
    private javax.swing.JMenu colorMenu;
    private javax.swing.JMenu currentColor;
    private javax.swing.JMenu currentTool;
    private javax.swing.JMenu cursorMenu;
    private javax.swing.JRadioButtonMenuItem drawCir;
    private javax.swing.JLabel drawLabel;
    private javax.swing.JRadioButtonMenuItem drawLine;
    private javax.swing.JRadioButtonMenuItem drawRect;
    private javax.swing.JMenuItem drawText;
    private javax.swing.JRadioButtonMenuItem drawTri;
    private javax.swing.JMenu drawingMenu;
    private javax.swing.JMenuItem fileClose;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileSave;
    private javax.swing.JMenuItem fileSaveAs;
    private javax.swing.JTextArea inputArea;
    private javax.swing.JScrollPane inputPanel;
    private javax.swing.JPanel listPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newBoard;
    private javax.swing.JButton sendButton;
    private javax.swing.JMenu shapeMenu;
    private javax.swing.JMenu textMenu;
    private javax.swing.JList<String> userList;
    private javax.swing.JLabel userListLabel;
    private javax.swing.JScrollPane userListPanel;
    // End of variables declaration//GEN-END:variables
}
